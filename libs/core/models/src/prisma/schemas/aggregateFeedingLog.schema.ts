import type { Prisma } from '../../../../../../node_modules/.prisma/client';
import { z } from 'zod';
import { FeedingLogOrderByWithRelationInputObjectSchema as FeedingLogOrderByWithRelationInputObjectSchema } from './objects/FeedingLogOrderByWithRelationInput.schema';
import { FeedingLogWhereInputObjectSchema as FeedingLogWhereInputObjectSchema } from './objects/FeedingLogWhereInput.schema';
import { FeedingLogWhereUniqueInputObjectSchema as FeedingLogWhereUniqueInputObjectSchema } from './objects/FeedingLogWhereUniqueInput.schema';
import { FeedingLogCountAggregateInputObjectSchema as FeedingLogCountAggregateInputObjectSchema } from './objects/FeedingLogCountAggregateInput.schema';
import { FeedingLogMinAggregateInputObjectSchema as FeedingLogMinAggregateInputObjectSchema } from './objects/FeedingLogMinAggregateInput.schema';
import { FeedingLogMaxAggregateInputObjectSchema as FeedingLogMaxAggregateInputObjectSchema } from './objects/FeedingLogMaxAggregateInput.schema';
import { FeedingLogAvgAggregateInputObjectSchema as FeedingLogAvgAggregateInputObjectSchema } from './objects/FeedingLogAvgAggregateInput.schema';
import { FeedingLogSumAggregateInputObjectSchema as FeedingLogSumAggregateInputObjectSchema } from './objects/FeedingLogSumAggregateInput.schema';

export const FeedingLogAggregateSchema: z.ZodType<Prisma.FeedingLogAggregateArgs> = z.object({ orderBy: z.union([FeedingLogOrderByWithRelationInputObjectSchema, FeedingLogOrderByWithRelationInputObjectSchema.array()]).optional(), where: FeedingLogWhereInputObjectSchema.optional(), cursor: FeedingLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), FeedingLogCountAggregateInputObjectSchema ]).optional(), _min: FeedingLogMinAggregateInputObjectSchema.optional(), _max: FeedingLogMaxAggregateInputObjectSchema.optional(), _avg: FeedingLogAvgAggregateInputObjectSchema.optional(), _sum: FeedingLogSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.FeedingLogAggregateArgs>;

export const FeedingLogAggregateZodSchema = z.object({ orderBy: z.union([FeedingLogOrderByWithRelationInputObjectSchema, FeedingLogOrderByWithRelationInputObjectSchema.array()]).optional(), where: FeedingLogWhereInputObjectSchema.optional(), cursor: FeedingLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), FeedingLogCountAggregateInputObjectSchema ]).optional(), _min: FeedingLogMinAggregateInputObjectSchema.optional(), _max: FeedingLogMaxAggregateInputObjectSchema.optional(), _avg: FeedingLogAvgAggregateInputObjectSchema.optional(), _sum: FeedingLogSumAggregateInputObjectSchema.optional() }).strict();